TODO List                                                             -*-org-*-

THIS LIST IS FAR AWAY FROM BEING COMPLETE, so these are the few things
that came up at the right moment to be written down.


* pimd 3.0 release:
** Check "Ignoring lo, has invalid address 127.0.0.1 and/or netmask 255.0.0.0"

We should allow routing to loopback, just check MULTICAST flag?

** Verify if spt-switchover really works ...

** DONE Fix layouts of =show pim rp= and =show pim crp=

They are too different to make sense.  Align on one common format, for
example the following.  Notice the column changes in both outputs and
the sorting of static entries first.

jocke@luthien:~/src/pimd [master]$ sudo ./src/pimctl sh p rp
Group Address       RP Address       Prio  Holdtime  Type
232/8               169.254.0.1         1   Forever  Static
224/4               192.168.122.1      20        75  Dynamic

jocke@luthien:~/src/pimd [master]$ sudo ./src/pimctl sh p crp
Group Address       RP Address       Prio  Holdtime  Expires
232/8               169.254.0.1         1    Static  Never
224/4               192.168.122.1      20        75  0h1m10s

** DONE Shared pimctl with pimd-dense
** DONE Update man page + split into a pimd.conf(5)
** DONE Allow IGMP report from src 0.0.0.0 (RFC)
** TODO Sync mrouted altnet fixes
** TODO Sync pimd-dense fixes
** TODO Add "show mfc" to ipc.c
Some platforms don't have sufficient tooling installed by default,
so a "pimctl show mfc" would be great to have.  This could also
show counters to help with debugging flows.

** TODO Add aliases for common pimctl commands

- pimctl show
- pimctl show if
- pimctl show routes  --> show pim routes
- pimctl show groups  --> show igmp groups

Including some summary features

- pimctl show if
- pimctl show interfaces

Show summary of 'pim int' and 'igmp int', because users don't care about
the distinction between layer-2 and layer-3.

** TODO Automatically add IP alias as altnet
 - Grab code from mrouted, 48a7a11
** DONE Substring matcher for pimctl
** TODO Merge patch from Ventus Networks
** Update ChangeLog
** .conf file changes?
- Remove backwards compat?
- Use yacc implementation from mrouted?
- Maybe do pimd-dense first? It already has yacc code
** Add Quagga interface?


* pimd 3.1 release:
** Merge pimd-dense
** Add sparse-dense mode, triggered per group
 - Cisco relies on group joins by the router itself
 - JunOS uses a dedicated syntax

* Random issues:
** Run the code checker sparse harder on the code: CC=cgcc make

** Start work on ironing out a TODO list for RFC 4601 compliancy.

** Look into updates RFC 5059 and RFC 5796

** Test again on Debian GNU/kFreeBSD.  Atm it lacks netinet/pim.h, but
  it should be possible to run the default config on it, probing the
  __FreeBSD_kernel__ and doing the right thing.

** Check Kame's pim6sd old sources for relevant fixes.
   http://www.kame.net/dev/cvsweb2.cgi/kame/kame/kame/pim6sd/Attic/

** Import Kame's pim6sd cfparse.[yl] config file parser reimplemented
   in lex & yacc, like mrouted does.

** DONE When receive PIM_REGISTER, check whether I am the chosen RP


** Install negative cache in kernel for non-frequently requested groups.

** The code should use the _PIM_VT handling of the 'struct pim'

** Check 2.10 from the spec "Unicast Routing Changes", and verify
   that it is properly implemented

** <masklen> in pimd.conf should be mandatory, instead of relaying
   of its default value (16)

** Candidate RP priority configuration in pimd.conf should be per
   prefix, instead of a single priority for the whole RP.

** Check whether Asserts received on the iif are really evaluated
   by using the metrics of other asserts received on that iif, or
   the comparison uses the local metric and preference info (it must
   be the former!).

** Experimental kernel MFC (*,G) related:
   If the (S,G) iif or oifs are different from the (*,G) or (*,*,RP)
   iifs/oifs, the resp. (*,G) or (*,*,RP) will delete and disallow
   creating (*,G) MFC. Only after all MRT (S,G) are deleted, the
   corresponding (*,G) or (*,*,RP) will create (*,G) MFC.

** Experimental kernel MFC (*,G) related:
   Right now when the MFC (*,G) total datarate is above the SPT switch
   threshold, the (*,G) MFC will be deleted, and any further cache miss
   will result in (S,G) MFC (the problem is that we must do (S,G)
   monitoring for eventually high datagate sources). Only after all
   (S,G) MFCs expire, the daemon's MRT will stop creating (S,G) MFCs
   (i.e. the next cache miss will result in (*,G) kernel MFC).
   A better selection should be applied to sort out the higher
   datarate sources, and at the same time to have (*,G)MFC as well.
   For example, create few (S,G), and after that create the (*,G). If some
   of the created (S,G) MFC entries have very low datarate, delete them.

** Use NetBSD's definition for IPADDR (netinet/in.h):
#ifdef _KERNEL
#define __IPADDR(x)     ((u_int32_t) htonl((u_int32_t)(x)))
#else
#define __IPADDR(x)     ((u_int32_t)(x))
#endif


** The (S,G)RPbit in the DR for the sender and the (S,G)SPT in the
   downstream router won't timeout and will refresh each other even
   if the sender is not active:

   S--DR-----------------R1------------RP
      (S,G)RPbit        (S,G)
                      iif toward S

** Check whether the kernel code sends CACHE_MISS and WRONG_IIF for
   the LAN-scoped addresses

** If the RP for a group changes, the DR should cancel any PIM-register-stop
   timers (XXX: not in the spec, but should be there)

** If a new interface is configured, include it automatically

** Don't create routing entries for local link scoped groups

** Implement adm. scoped filters

** Do precise check of the timer events to speed up the propagation of the
Cand-RP messages + Cand-BSR messages and the election of the BSR.

** Fix the bug for messing up the things when the receiver is on the
same host as the RP for the multicast group (probably was fixed with alpha6,
because I cannot reproduce it anymore)

** Do more precise error check for the received PIM messages. In most cases,
the whole message must be parsed completely before starting processing it.

** Clean up the debugging messages.

** Use Patricia tree to search the routing table
(There is a nice paper in Sigcomm '97 about fast routing tables
implementation, so need to check it as well)

** Do switch back to the Shared Tree by timing out the SPT if the rate
is too low (not in the spec, but Ahmed pointed out some complications if
this happens)

** Change all countdown timers to events timeout (callout.c)
(The current implementation is very unefficient if the routing table becomes
very large)

** Send immediately Join/Prune, instead of relying of Join/Prune timer = 0

** Fix the code allowing interface UP/DOWN without restarting pimd.

** Do more testings for SPT switch, Join/Prune, asserts, etc...

** Test the (*,*,RP) code (need PIM/DVMRP border router to do so)

** Test the RSRR (RSVP support) code

** Send Initial_Reply RSRR message if the interfaces detected by pimd change

** SNMP support, RFC2934

* Issues by function name:
** igmp_proto.c:
   - accept_group_report():
     * add a leaf if DR or forwarder (currently only if DR)???
   - accept_leave_message():
     * send immediately PIM prune message if the last member has left

** main.c
   - main():
     * use a combination of time and hostid to initialize the random generator.
   - restart():
     * check the implementation

** pim_proto.c
   - pim_register():
     * IF THE BORDER BIT IS SET, THEN FORWARD THE WHOLE PACKET FROM USER SPACE
       AND AT THE SAME TIME IGNORE ANY CACHE_MISS SIGNALS FROM THE KERNEL.
   - register_stop():
     * REGISTER_STOP rate limiting

** route.c
   - process_cache_miss()
     * use negative cache.

** rp.c
   - add_rp_grp_entry():
     * FIX THE BUG when adding an RP for different prefix requires remapping
       for some groups!!!  (Intentionally left, waiting to come up with an idea
       how to implement it simple and efficient. If you configure all RPs to
       advertise the same prefix, the bug won't "show up")


